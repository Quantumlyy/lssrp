name: Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'api/src/**'
      - 'api/prisma/**'
      - '.github/workflows/continuous-deployment-api.yml'
      - 'api/codegen.yml'
      - 'api/package.json'
      - 'api/Dockerfile'

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/problemMatchers/tsc.json"
          echo "::add-matcher::.github/problemMatchers/eslint-stylish.json"
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )


  Build:
    name: Compiling TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        id: cache-restore
        with:
          path: api/node_modules
          key: ${{ runner.os }}-16-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: |
          cd api
          yarn --frozen-lockfile
          cd ..
      - name: Build Code
        run: |
          cd api
          yarn build
          cd ..
      - name: Upload API bundle to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: api_bundle
          path: api/generated/api/
          if-no-files-found: error

  PushToRegistry:
    name: Push Docker image to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 10
      - name: Download build bundle artifact
        uses: actions/download-artifact@v2
        with:
          name: api_bundle
          path: api/generated/api/
      - name: Add Docker tags
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/${{ github.repository }}-server
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  GenerateTypings:
    name: Generate TypeScript, and SDL type information
    runs-on: ubuntu-latest
    needs: [PushToRegistry]
    services:
      cache:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      db:
        image: postgres:13
        env:
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "postgres"
          POSTGRES_DB: "social"
      api:
        image: ghcr.io/quantumlyy/social-engine-server:main
        env:
          PORT: 8284
          SPORTAJ_REDIS_HOST: cache
          SPORTAJ_REDIS_PORT: 6379
          DATABASE_URL: "postgresql://postgres:postgres@db:5432/social?schema=public"
        ports:
          - 8284:8284
        credentials:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        with:
          path: api/node_modules
          key: ${{ runner.os }}-16-${{ hashFiles('**/yarn.lock') }}
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        id: cache-restore
        with:
          path: api/node_modules
          key: ${{ runner.os }}-16-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: yarn --frozen-lockfile
      - name: Generate GraphQL Schema code
        run: |
          cd api
          yarn codegen
          cd ..
      - name: Upload typescript bundle to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: typescript_bundle
          path: generated/ts/
          if-no-files-found: error

  GithubPublish:
    name: Publishing release to Github
    runs-on: ubuntu-latest
    needs: [GenerateTypings]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        id: cache-restore
        with:
          path: api/node_modules
          key: ${{ runner.os }}-16-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: |
          cd api
          yarn --frozen-lockfile
          cd ..
      - name: Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      - name: Bump semver
        run: |
          cd api
          yarn sversion
          cd ..
      - name: Store bumped package.json
        uses: actions/upload-artifact@v2
        with:
          name: package_bundle
          path: api/package.json
          if-no-files-found: error
      - name: Store bumped changelog.md
        uses: actions/upload-artifact@v2
        with:
          name: changelog_bundle
          path: api/CHANGELOG.md
          if-no-files-found: error
      - name: Push changes
        run: git push --follow-tags origin main

  GithubPackageRegistryNode:
    name: Publishing release to Github Package Registry
    runs-on: ubuntu-latest
    needs: [GithubPublish]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Setup Node for publishing to Github
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Download generated typings artifact
        uses: actions/download-artifact@v2
        with:
          name: typescript_bundle
          path: api/generated/ts/
      - name: Download stored package.json
        uses: actions/download-artifact@v2
        with:
          name: package_bundle
          path: api/package.json
      - name: Download stored changelog.md
        uses: actions/download-artifact@v2
        with:
          name: changelog_bundle
          path: api/CHANGELOG.md
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        id: cache-restore
        with:
          path: api/node_modules
          key: ${{ runner.os }}-16-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: |
          cd api
          yarn --frozen-lockfile
          cd ..
      - name: Publish to npm
        run: |
          cd api
          npm publish
          cd ..
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
